#include <vector>

namespace SLAM_Solver{

class SLAM_Solver
{
public:
    enum SolverType { 
        LM = 0,
        PCG = 1,
        DOGLEG = 2,
    };
    void setCameraIntrinsics(std::vector<double>& K, int flag) {
        // 左目
        if(flag == 0) {
            cameraIntrinsics = K;
        }
        else { // 右目
            rightCameraIntrinsics = K;
        }
    }
    void setIsIncremental(bool flag) {
        isIncremental = flag;
    }
    void setSolverType(SolverType type) {
        solverType = type;
    }
    // 一次性设置多个参数
    void setParameters() {

    }

// 外部接口
    void addParameterBlock(std::vector<double>pose);               // 添加优化变量,相机位姿
    void addParameterBlock(double invDepth);                       // 添加优化变量，逆深度
    void addIMUResidualBlock();                                    // 添加IMU残差块
    void addFeatureResidualBlock();                                // 添加视觉残差块
    void solve();                           // 优化求解


    void addMarginalizationBlock();         // 
    void getSolveResults();                 // 获取优化结果



private:

    
    void computeIMUJacobians();            // 计算 IMU Jacobians 与残差 
    void cpmputeFeatureJacobians();        // 计算视觉 Jacobians 与残差
    void updateSchurComplement();          // 跟新 Schur 举证块
    void solveSchurComplement();           // 求解 Schur 方程，获得相机位姿增量
    void solveInverseDepth();              // 计算逆深度
    

    std::vector<double> cameraIntrinsics, rightCameraIntrinsics;    //左右目相机内参
    bool isIncremental;                                             // 是否增量化
    int interatorNum;                                               //迭代次数
    SolverType solverType;
};

}


